// This file has been generated by reducer-gen (@Stefan Pauka) written in 2020.
// DO NOT Change anything inside this file. Every time the generator is used, it will be overwritten.

import React from "react";
import IState from "./state";
import snackbarReducer from "./reducer/reducer.main.generated";
import SnackbarReducerActions from "./reducerActions/reducerActions.main.generated";
import getSnackbarDefaultState from "./defaultState.base.generated";

export interface ISnackbarReducerContext {
    state: IState;
    dispatch: React.Dispatch<SnackbarReducerActions>;
}

export type IDispatchSnackbarReducerContext = React.Dispatch<SnackbarReducerActions>;

export type IStateSnackbarReducerContext = IState;

export const SnackbarReducerContext = React.createContext<ISnackbarReducerContext>({
    state: getSnackbarDefaultState(),
    dispatch: () => undefined,
});

export const DispatchSnackbarReducerContext = React.createContext<IDispatchSnackbarReducerContext>(() => undefined);

export const StateSnackbarReducerContext = React.createContext<IStateSnackbarReducerContext>(getSnackbarDefaultState());

export const SnackbarReducerContextProvider = (props: {
    children: React.ReactNode;
}) => {
    const { children } = props;

    const [state, dispatch] = React.useReducer(
    snackbarReducer,
    undefined,
    getSnackbarDefaultState
    );

    const context: {
    state: IState;
    dispatch: React.Dispatch<SnackbarReducerActions>;
    } = React.useMemo(() => ({ state, dispatch }), [state, dispatch]);

    return (
    <DispatchSnackbarReducerContext.Provider value={dispatch}>
        <StateSnackbarReducerContext.Provider value={state}>
            <SnackbarReducerContext.Provider value={context}>
                {children}
            </SnackbarReducerContext.Provider>
        </StateSnackbarReducerContext.Provider>
    </DispatchSnackbarReducerContext.Provider>
    );
};

export const useSnackbarReducerContext: () => ISnackbarReducerContext = () => {
    return React.useContext<ISnackbarReducerContext>(SnackbarReducerContext);
};

export const useSnackbarReducerContextState: () => IStateSnackbarReducerContext = () => {
    return React.useContext<IStateSnackbarReducerContext>(StateSnackbarReducerContext);
};

export const useSnackbarReducerContextDispatch: () => IDispatchSnackbarReducerContext = () => {
    return React.useContext<IDispatchSnackbarReducerContext>(DispatchSnackbarReducerContext);
};
