// This file has been generated by reducer-gen (@Stefan Pauka) written in 2020.
// DO NOT Change anything inside this file. Every time the generator is used, it will be overwritten.

import IState from "./../state";
import getDefaultState from "./../defaultState.base.generated";
import ReducerAction from "./../reducerActions/reducerActions.base.generated";
import actions from "./../actions/action.base.generated";
            
const snackbarReducerBase = (state: IState = getDefaultState(), action: ReducerAction): IState => {
    switch (action.type) {
       case actions.SNACKBAR_SET_APP_STATE:
            return {
                ...state, 
                appState: action.next,
            };
       case actions.SNACKBAR_SET_DARK_MODE:
            return {
                ...state, 
                darkMode: action.next,
            };
       case actions.SNACKBAR_SET_SNACKBAR_DATAS:
            return {
                ...state, 
                snackbarDatas: action.next,
            };
       case actions.SNACKBAR_SET_IS_HEADER_EXPANDED:
            return {
                ...state, 
                isHeaderExpanded: action.next,
            };
       case actions.SNACKBAR_SET_LOADING_INDICATORS:
            return {
                ...state, 
                loadingIndicators: action.next,
            };
       case actions.SNACKBAR_SET_GLOBAL_LOADING_INDICATORS:
            return {
                ...state, 
                globalLoadingIndicators: action.next,
            };
       case actions.SNACKBAR_SET_LOCALE:
            return {
                ...state, 
                locale: action.next,
            };
       case actions.SNACKBAR_SET_FEATURE:
            return {
                ...state, 
                feature: action.next,
            };
       case actions.SNACKBAR_SET_APP_BASE_PATH:
            return {
                ...state, 
                appBasePath: action.next,
            };        
        default:
            return state; 
    }
}


export default snackbarReducerBase