// This file has been generated by reducer-gen (@Stefan Pauka) written in 2020.

import IState from "./../state";
import getDefaultState from "./../defaultState.base.generated";
import extendedActions from "./../actions/action.extended";
// import actions from "./../actions/action.base.generated";
import AppReducerActions from "./../reducerActions/reducerActions.main.generated";

// Uncomment for some typechecking:
// import { isAppReducerActionsBase } from "./../reducerActions/reducerActions.base.generated";
// import { isAppReducerActionsExtended } from "./../reducerActions/reducerActions.extended";

/**
 * You may add here extending reducer behaviors for this features reducer
 */

const appReducerExtended = (
  state: IState = getDefaultState(),
  action: AppReducerActions
): IState => {
  switch (action.type) {
    case extendedActions.ADD_SNACKBAR_DATA:
      return { ...state, snackbarDatas: [...state.snackbarDatas, action.next] };
    case extendedActions.REMOVE_SNACKBAR_DATA:
      return {
        ...state,
        snackbarDatas: state.snackbarDatas.filter(
          (data) => data !== action.next
        ),
      };
    case extendedActions.ADD_LOADING:
      return {
        ...state,
        loadingIndicators: [...state.loadingIndicators, action.next],
      };
    case extendedActions.REMOVE_LOADING:
      return {
        ...state,
        loadingIndicators: (state.loadingIndicators || []).filter(
          (data) => data !== action.next
        ),
      };
    case extendedActions.ADD_GLOBAL_LOADING:
      return {
        ...state,
        globalLoadingIndicators: [...state.globalLoadingIndicators, action.next],
      };
    case extendedActions.REMOVE_GLOBAL_LOADING:
      return {
        ...state,
        globalLoadingIndicators: (state.globalLoadingIndicators || []).filter(
          (data) => data !== action.next
        ),
      };
    //         case actions["[actionName]"]:
    //             return {
    //                 ...state,
    //                 // [action payload]
    //            };
    //         case extendedActions["[actionName]"]:
    //             return {
    //                 ...state,
    //                 // [action payload]
    //              };
    default:
      return state;
  }
};

export default appReducerExtended;
